Off from the races!
Concurrency patterns using higher-order functions

Issac Trotts
SWE on Google App Engine runtimes team
issactrotts@google.com

* Go makes concurrency easy, doesn't it?

Let's try fetching some URLs concurrently and wait for them all:

	var wg sync.WaitGroup
	var urls = []string{
		"http://www.golang.org/",
		"http://www.google.com/",
		"http://www.somestupidname.com/",
	}
	for _, url := range urls {
		// Increment the WaitGroup counter.
		wg.Add(1)
		// Launch a goroutine to fetch the URL.
		go func(url string) {
			// Decrement the counter when the goroutine completes.
			defer wg.Done()
			// Fetch the URL.
			http.Get(url)
		}(url)
	}
	// Wait for all HTTP fetches to complete.
	wg.Wait() 

The concurrency pattern is tangled with the app logic.

* What if we could write it like this?

What to do:

	var urls = []string{
		"http://www.golang.org/",
		"http://www.google.com/",
		"http://www.somestupidname.com/",
	}
	var fetchers []func()
	for _, url := range urls {
		url := url
		fetchers = append(fetchers, func() {
			http.Get(url)
		})
	}
	run(fetchers)

* We can.

How to do it:

	func run(fs []func()) {
		var wg sync.WaitGroup
		for _, f := range fs {
			f := f
			wg.Add(1)
			go func() {
				defer wg.Done()
				f()
			}()
		}
		wg.Wait()
	}

App logic is clarified.
Tricky concurrency can be tested and debugged separately.

* How is this different from the errgroup package?

[[https://godoc.org/golang.org/x/sync/errgroup]]
"Package errgroup provides synchronization, error propagation, and Context cancelation for groups of goroutines working on subtasks of a common task."

What it doesn't do is untangle concurrency logic from app logic.

* JustErrors example from errgroup doc. Still tangled.

	var g errgroup.Group <-----------------------------
	var urls = []string{
	    "http://www.golang.org/",
	    "http://www.google.com/",
	    "http://www.somestupidname.com/",
	}
	for _, url := range urls {
	    // Launch a goroutine to fetch the URL.
	    url := url // https://golang.org/doc/faq#closures_and_goroutines
	    g.Go(func() error { <-----------------------------
		// Fetch the URL.
		resp, err := http.Get(url)
		if err == nil {
		    resp.Body.Close()
		}
		return err
	    })
	}
	// Wait for all HTTP fetches to complete.
	if err := g.Wait(); err == nil { <-----------------------------
	    fmt.Println("Successfully fetched all URLs.")
	}

* Let's untangle it (part I):

What to do:

	var urls = []string{ ... }
	var fs []func() error
	for _, url := range urls {
		url := url
		fs = append(fs, func() error {
			resp, err := http.Get(url)
			if err == nil {
				resp.Body.Close()
			}
			return err
		})
	}
	if err := run(fs); err == nil {
	    fmt.Println("Successfully fetched all URLs.")
	}

* Let's untangle it (part II):

How to do it:

	func run(fs []func() error) error {
		var g errgroup.Group
		for _, f := range fs {
			g.Go(f)
		}
		return g.Wait()
	}

* Pipelines: linear chain (page 1)
[[https://blog.golang.org/pipelines]]

	func main() {
		// Set up the pipeline.
		c := gen(2, 3)
		out := sq(c)

		// Consume the output: 4, 9
		for x := range c {
			fmt.Println(x)
		}
	}

* Pipelines: linear chain (page 2)

	func gen(nums ...int) <-chan int {
		out := make(chan int)
		go func() {
			for _, n := range nums {
				out <- n
			}
			close(out)
		}()
		return out
	}
	
	func sq(in <-chan int) <-chan int {
		out := make(chan int)
		go func() {
			for n := range in {
				out <- n * n
			}
			close(out)
		}()
		return out
	}

* Pipelines: linear chain (page 3)
Slightly more interesting main runs `sq` twice:

	func main() {
		// Set up the pipeline and consume the output:
		for x := range sq(sq(gen(2, 3))) {
			fmt.Println(x)
		}
	}


* Pipelines: linear chain untangled (page 1)

What do to:

	func main() {
		sq := func(x int) int { return x * x }
		for x := range mapPipeline([]int{2, 3}, sq, sq) {
			fmt.Println(x)
		}
	}

* Pipelines: linear chain untangled (page 2)

How to do it:

	func mapPipeline(xs []int, fs ...func(int) int) chan int {
		if len(fs) == 0 {
			out := make(chan int)
			go func() {
				for _, x := range xs {
					out <- x
				}
				close(out)
			}()
			return out
		}
		in := mapPipeline(xs, fs[1:]...)
		f := fs[0]
		out := make(chan int)
		go func() {
			for x := range in {
				out <- f(x)
			}
			close(out)
		}()
		return out
	}
